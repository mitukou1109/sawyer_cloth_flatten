#!/usr/bin/env python

import rospy

import actionlib

from sawyer_cloth_flatten.realsense_handler import RealSenseHandler
from sawyer_cloth_flatten.sawyer_controller import SawyerController

from sawyer_cloth_flatten.msg import PickAndMoveClothAction

class SawyerClothFlatten(object):
    def __init__(self):
        self._realsense_handler = RealSenseHandler()

        self._sawyer_controller = SawyerController()

        self._pick_and_move_cloth_action_server = actionlib.SimpleActionServer(
            'pick_and_move_cloth', PickAndMoveClothAction, execute_cb=self.pick_and_move_cloth_execute_cb, auto_start=False)

        self._pick_and_move_cloth_action_server.start()

    def _pick_and_move_cloth(self, pick_position, goal_position):
        self._sawyer_controller.open_gripper()

        if not self._sawyer_controller.move_to_position(pick_position):
            return False

        self._sawyer_controller.close_gripper()

        if not self._sawyer_controller.move_to_position(goal_position):
            return False

        self._sawyer_controller.open_gripper()

        return True

    def pick_and_move_cloth_execute_cb(self, goal):
        if self._pick_and_move_cloth(goal.pick_position, goal.goal_position):
            self._pick_and_move_cloth_action_server.set_succeeded()
        else:
            self._pick_and_move_cloth_action_server.set_aborted()
            rospy.logwarn('Aborted goal')

    def on_shutdown(self):
        self._sawyer_controller.on_shutdown()

def main():
    rospy.init_node('sawyer_cloth_flatten')

    sawyer_cloth_flatten = SawyerClothFlatten()
    rospy.on_shutdown(sawyer_cloth_flatten.on_shutdown)

    rospy.spin()

if __name__ == '__main__':
    main()
